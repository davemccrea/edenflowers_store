defmodule Edenflowers.Repo.Migrations.CoursesAndRegistrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:courses, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false
      add :location_name, :text, null: false
      add :location_address, :text, null: false
      add :image_slug, :text, null: false
      add :date, :date, null: false
      add :start_time, :time, null: false
      add :end_time, :time, null: false
      add :register_before, :date, null: false
      add :total_places, :bigint, null: false
      add :price, :decimal, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:course_registrations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :email, :text, null: false
      add :status, :text, default: "pending"
      add :registered, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "course_registrations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :course_id,
          references(:courses,
            column: :id,
            name: "course_registrations_course_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:course_registrations, "course_registrations_user_id_fkey")

    drop constraint(:course_registrations, "course_registrations_course_id_fkey")

    drop table(:course_registrations)

    drop table(:courses)
  end
end
